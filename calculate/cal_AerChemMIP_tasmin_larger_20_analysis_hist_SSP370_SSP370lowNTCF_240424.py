'''
2024-4-24
This script is to calculate tropical night, during which the tasmin larger than 20. The purpose is to compare it with the ACP to check if it has problem with my tasmin data
'''
import xarray as xr
import numpy as np

# ========================== File Information =============================

path_datamin  = '/home/sun/data/process/model/aerchemmip-postprocess/tasmin/'

# =========================================================================



def cal_frequency(tasmin, out_path, out_name):
    '''
        tasmin is the ncfile
    '''
    # 1. Initialize the array
    year_hist = np.linspace(1950, 2014, 2014-1950+1, dtype=int) ; year_ssp = np.linspace(2015, 2050, 2050-2015+1, dtype=int) ; year_ntcf = year_ssp

    #print(year_hist)

    lat       = tasmin.lat.data ; lon       = tasmin.lon.data

    # The first axis is events, duration, intensity
    hist_hw_tasmin = np.zeros((len(year_hist),len(lat), len(lon)))  ; hist_hw_tasmax = hist_hw_tasmin.copy()
    ssp_hw_tasmin  = np.zeros((len(year_ssp), len(lat), len(lon)))  ; ssp_hw_tasmax  = ssp_hw_tasmin.copy()
    ntcf_hw_tasmin = np.zeros((len(year_ssp), len(lat), len(lon)))  ; ntcf_hw_tasmax = ntcf_hw_tasmin.copy()

    # 2. calculate the events for each year
    # 2.1 calculate the historical simulation
    j = 0 # Number control the iteration for historical
    for yyyy0 in year_hist:
        hist_hw_tasmin_1yr = tasmin.sel(time=tasmin.time.dt.year.isin([yyyy0]))
        print(tasmin)

        anomaly_hist_tasmin     = hist_hw_tasmin_1yr['tasmin'].data - 273.15 - 20 ; anomaly_hist_tasmin[anomaly_hist_tasmin < 0] = np.nan  # Mask the negative value, only contain the anomalies in possible heatwave 

        # for every grid calculate the heat wave information
        for yy in range(len(lat)):
            for xx in range(len(lon)):
                hist_hw_tasmin[j, yy, xx] = np.sum(~np.isnan(anomaly_hist_tasmin))

        j += 1
        print(f'Now it is in the year {yyyy0} for historical {out_name}')

    # 2.2 calculate the SSP370/ simulation
    j = 0 # Number control the iteration for SSP370
    for yyyy0 in year_ssp:
        ssp_hw_tasmin_1yr  = tasmin.sel(time=tasmin.time.dt.year.isin([yyyy0]))

        anomaly_ssp_tasmin     = ssp_hw_tasmin_1yr['tasmin'].data - 273.15 - 20 ; anomaly_ssp_tasmin[anomaly_ssp_tasmin < 0] = np.nan  # Mask the negative value, only contain the anomalies in possible heatwave 

        # for every grid calculate the heat wave information
        for yy in range(len(lat)):
            for xx in range(len(lon)):
                ssp_hw_tasmin[:, j, yy, xx]  = np.sum(~np.isnan(anomaly_ssp_tasmin))

        j += 1
        print(f'Now it is in the year {yyyy0} for SSP {out_name}')

    # 2.3 calculate the SSP370lowNTCF simulation
    j = 0 # Number control the iteration for SSP370
    for yyyy0 in year_ntcf:
        ntcf_hw_tasmin_1yr = tasmin.sel(time=tasmin.time.dt.year.isin([yyyy0]))

        anomaly_ntcf_tasmin    = ntcf_hw_tasmin_1yr['tasmin'].data - 273.15 - 20 ; anomaly_ntcf_tasmin[anomaly_ntcf_tasmin < 0] = np.nan  # Mask the negative value, only contain the anomalies in possible heatwave 

        # for every grid calculate the heat wave information
        for yy in range(len(lat)):
            for xx in range(len(lon)):
                ntcf_hw_tasmin[:, j, yy, xx] = np.sum(~np.isnan(ntcf_hw_tasmin_1yr))

        j += 1
        print(f'Now it is in the year {yyyy0} for SSP370lowNTCF {out_name}')

    # Write to ncfile
    ncfile  =  xr.Dataset(
        {
            "hist_tr20":     (["time0", "lat", "lon"], hist_hw_tasmin), 
            "ssp_tr20":      (["time1", "lat", "lon"], ssp_hw_tasmin), 
            "ntcf_tr20":     (["time2", "lat", "lon"], ntcf_hw_tasmin), 
        },
        coords={
            "time0": (["time0"], year_hist),
            "time1": (["time1"], year_ssp),
            "time2": (["time2"], year_ntcf),
            "lat":  (["lat"],    lat),
            "lon":  (["lon"],    lon),
        },
        )

    ncfile.attrs['description'] = 'Created on 2024-4-24. This file generated by cal_AerChemMIP_tasmin_larger_20_analysis_hist_SSP370_SSP370lowNTCF_240424.py from Huaibei server. This file save the result of tropical night (tasmin>20) under 3 scenarios.'

    ncfile.to_netcdf(out_path + out_name)


def cal_frequency_hist(tasmin, out_path, out_name):
    '''
        tasmin is the ncfile
    '''
    # 1. Initialize the array
    year_hist = np.linspace(1950, 2014, 2014-1950+1, dtype=int)

    #print(year_hist)

    lat       = tasmin.lat.data ; lon       = tasmin.lon.data

    # The first axis is events, duration, intensity
    hist_hw_tasmin = np.zeros((len(year_hist),len(lat), len(lon)))  ; hist_hw_tasmax = hist_hw_tasmin.copy()


    # 2. calculate the events for each year
    # 2.1 calculate the historical simulation
    j = 0 # Number control the iteration for historical
    for yyyy0 in year_hist:
        hist_hw_tasmin_1yr = tasmin.sel(time=tasmin.time.dt.year.isin([yyyy0]))
        #print(tasmin)

        anomaly_hist_tasmin     = hist_hw_tasmin_1yr['tasmin'].data - 273.15 - 20 ; anomaly_hist_tasmin[anomaly_hist_tasmin < 0] = np.nan  # Mask the negative value, only contain the anomalies in possible heatwave 

        # for every grid calculate the heat wave information
        hist_hw_tasmin[j] = np.sum(~np.isnan(anomaly_hist_tasmin), axis=0)

        j += 1
        print(f'Now it is in the year {yyyy0} for historical {out_name}')


    # Write to ncfile
    ncfile  =  xr.Dataset(
        {
            "hist_tr20":     (["time0", "lat", "lon"], hist_hw_tasmin), 
        },
        coords={
            "time0": (["time0"], year_hist),
            "lat":  (["lat"],    lat),
            "lon":  (["lon"],    lon),
        },
        )

    ncfile.attrs['description'] = 'Created on 2024-4-24. This file generated by cal_AerChemMIP_tasmin_larger_20_analysis_hist_SSP370_SSP370lowNTCF_240424.py from Huaibei server. This file save the result of tropical night (tasmin>20) under 3 scenarios.'

    ncfile.to_netcdf(out_path + out_name)

def cal_frequency_furt(tasmin, out_path, out_name):
    '''
        tasmin is the ncfile
    '''
    # 1. Initialize the array
    year_furt = np.linspace(2015, 2050, 2050-2015+1, dtype=int)

    #print(year_hist)

    lat       = tasmin.lat.data ; lon       = tasmin.lon.data

    # The first axis is events, duration, intensity
    furt_hw_tasmin  = np.zeros((len(year_furt), len(lat), len(lon)))


    # 2.2 calculate the SSP370/ simulation
    j = 0 # Number control the iteration for SSP370
    for yyyy0 in year_furt:
        ssp_hw_tasmin_1yr  = tasmin.sel(time=tasmin.time.dt.year.isin([yyyy0]))
        #print(ssp_hw_tasmin_1yr)
        anomaly_ssp_tasmin     = ssp_hw_tasmin_1yr['tasmin'].data - 273.15 - 20 ; anomaly_ssp_tasmin[anomaly_ssp_tasmin < 0] = np.nan  # Mask the negative value, only contain the anomalies in possible heatwave 

        # for every grid calculate the heat wave information
        furt_hw_tasmin[j,]  = np.sum(~np.isnan(anomaly_ssp_tasmin), axis=0)

                #print(furt_hw_tasmin[j, yy, xx])

        j += 1
        print(f'Now it is in the year {yyyy0} for SSP {out_name}')


    # Write to ncfile
    ncfile  =  xr.Dataset(
        {
            "furt_tr20":      (["time1", "lat", "lon"], furt_hw_tasmin), 
        },
        coords={
            "time1": (["time1"], year_furt),
            "lat":  (["lat"],    lat),
            "lon":  (["lon"],    lon),
        },
        )

    ncfile.attrs['description'] = 'Created on 2024-4-24. This file generated by cal_AerChemMIP_tasmin_larger_20_analysis_hist_SSP370_SSP370lowNTCF_240424.py from Huaibei server. This file save the result of tropical night (tasmin>20) under 3 scenarios.'

    ncfile.to_netcdf(out_path + out_name)

if __name__ == '__main__':
    import os

    sample_lists = os.listdir(path_datamin) ; sample_lists.sort()
    out_path     = '/home/sun/data/process/analysis/AerChem/tropical_night/'
    
#    print(sample_lists)
    for sample0 in sample_lists:
        print('Now it is deal with {}'.format(sample0))

        ftasmin = xr.open_dataset(path_datamin + sample0)

        if 'historical' in sample0:

            cal_frequency_hist(ftasmin, out_path, sample0)
        
        else:

            cal_frequency_furt(ftasmin, out_path, sample0)
